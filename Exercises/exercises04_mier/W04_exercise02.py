"""W04_exercise02 - join()"""
import subprocess

subprocess.call(["/usr/bin/clear"])  # Orkar inte ta reda p친 hur man skriver ut CTRL-L = clear screen: ) 
print("""
#
# 칐VNING X
#
# Denna 칬vning kr칛ver import av listan ascii_lowercase fr친n modulen string:
#
#   from string import ascii_lowercase
#
# Utforska g칛rna denna modul, t.ex. genom att skriva  'dir(string)' i en
# pythonkonsol. Modulen inneh친ller flera anv칛nda str칛ngvariabler. Pr칬va g칛rna
# att skriva ut n친gra av dem, t.ex. genom att skriva 'print(string.digits)'
# i en konsol.
#
# Om man inte vill anv칛nda string-modulen kan man anv칛nda denna str칛ngvariabel:
#
#   ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
# 
#
# 칐vning X: 
# Skriv ut str칛ngvariabeln ascii_lowercase (se ovan), en bokstav per rad.
# TIPS: Anv칛nd str칛ngen "\n" (radbrytningstecken) och str칛ngmetoden join().
#
# TIPS: Om du jobbar i ett python-skal (t.ex. i IDLE) beh칬ver du anv칛nda funktionen
# print(), annars kommer str칛ngen
#   'a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nx\\ny\\nz'
# att skrivas ut: print()-satsen beh칬vs f칬r att radbrytningstecknet "\n" ska tolkas som en radbrytning.
#
# L칐SNINGSF칐RSLAG 1:

from string import ascii_lowercase
print("\\n".join(ascii_lowercase))

# L칐SNINGSF칐RSLAG 2:

ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
print("\\n".join(ascii_lowercase))

# L칐SNINGSF칐RSLAG 3 (utan join()):
for _ in list(string.ascii_lowercase):
    print(_)

""")

from string import ascii_lowercase
print("\n".join(ascii_lowercase))



print("-" * 80)  # foo
input("Press return for next")
subprocess.call(["/usr/bin/clear"])

print("""
# 칐vning X - extra
# Skriv ut str칛ngen ascii_lowercase i omv칛nd ordning, ett tecken per rad
#
# TIPS: Anv칛nd funktionen sorted() p친 str칛ngvariabeln tillsammans med
# "\\n" och join(), som ovan.
#
# L칐SNINGSF칐RSLAG:
from string import ascii_lowercase
print("\\n".join(sorted(ascii_lowercase, reverse=True)))

""")
from string import ascii_lowercase
print("\n".join(sorted(ascii_lowercase, reverse=True)))



print("-" * 80)  # foo
input("Press return for next")
subprocess.call(["/usr/bin/clear"])



print("""
# 칐VNING Y.
# 1. Skapa en lista best친ende av str칛ngarna '0', '1', ... , '9'. 
#    Skriv sedan ut listan, en str칛ng per rad.
# 
# TIPS 1: Ett enkelt s칛tt att l칬sa uppgiften 칛r att anv칛nda list()
#         p친 str칛ngen '0123456789' f칬r att skapa en lista och sedan
#         anv칛nda en for-loop f칬r att skriva ut ett tecken per rad.
#
# TIPS 2: Ett lite mer avancerat (och roligare! :) s칛tt att g칬ra samma
#         sak p친 칛r att anv칛nda en list comprehension tillsammans med
#         str()-funktionen f칬r att skapa listan och sedan anv칛nda 
#         "\\n".join(), som ovan.
# 
# TIPS 3: Att importera str칛ngen digits fr친n string-modulen 칛r kanske 
#         lite overkill, men samtidigt kanske ocks친 lite roligare/intressantare
#         eftersom man f친r 칬va sig p친 att importera objekt fr친n moduler.
#         Det ska vara roligt att programmera!
#         游땎

# L칐SNINGSF칐RSLAG 1:
num_string = [str(k) for k in range(10)] 
print("\\n".join(num_string))


# L칐SNINGSF칐RSLAG 2 (allt p친 en enda kodrad):
print("\\n".join([str(k) for k in range(10)]))


# L칐SNINGSF칐RSLAG 3 (utan comprehension):
import string
print("\\n".join(list(string.digits)))


# L칐SNINGSF칐RSLAG 4 (med en for-loop):
num_list = list('0123456789')
for _ in num_list:
    print(_)

""")

# 1
num_string = [str(k) for k in range(10)] 
print("\n".join(num_string))
print()

# 2
print("\n".join([str(k) for k in range(10)]))
print()

# 3
import string
print("\n".join(list(string.digits)))


print("-" * 80)  # foo
input("Press return for next")
subprocess.call(["/usr/bin/clear"])


print("""
# 칐VNING W
# Skapa en str칛ng best친ende av alla gemena (sm친) bokst칛ver med ett kommatecken
# infogat mellan varje par av bokst칛ver. Skriv sedan ut str칛ngen.
# 
# TIPS 1: Om du vill slippa skriva in alla bokst칛ver kan du, som i 칬vningen ovan, 
# importera variabeln ascii_lowercase fr친n modulen string:
#   from string import ascii_lowercase
#
# L칐SNINGSF칐RSLAG:
from string import ascii_lowercase
comma_string = ", ".join(ascii_lowercase)
print(comma_string)

""")
from string import ascii_lowercase
comma_string = ", ".join(ascii_lowercase)
print(comma_string)


print("-" * 80)  # foo
input("Press return for next")
subprocess.call(["/usr/bin/clear"])

print("""
# 칐VNING Z
#
# Python till친ter inte att man 칛ndrar direkt *i* en str칛ngvariabel, s친 om
# man beh칬ver uppdatera en textstr칛ng m친ste man komma runt detta.
#
# Det finns flera s칛tt att g칬ra detta p친, varav det kanske enklase och 
# effektivaste s칛ttet 칛r att anv칛nda str칛ngmetoden replace() f칬r att skapa
# en *ny* str칛ng som man sedan tilldelar sin variabel:
#
#   string_with_no_underscores = string_with_underscores.replace("_", " ")
#
# Ett annat s칛tt, som vi f칬r 칬vningen skull ska anv칛nda h칛r, 칛r att konvertera
# str칛ngen till en lista och sedan g친 igenom listan element f칬r element och
# 칛ndra det som ska 칛ndras p친. N칛r man 칛r klar med 칛ndringarna anv칛nder man
# join() f칬r att konvertera tillbaka till en str칛ng.
#
#
# Anv칛nd den senare metoden f칬r att byta ut alla "_"-tecken mot
# mellanslag (" ") i nedanst친ende str칛ng:
#
#       string_with_underscores = "Den_h칛r_str칛ngen_inneh친ller_underscores"
#
# 
# TIPS 1: B칬rja med att g칬ra om str칛ngen till en lista med hj칛lp av list().
#         Anv칛nd sedan en for-loop f칬r att g친 igenom listan och 칛ndra d칛r det beh칬vs.
#         N칛r for-loopen 칛r klar, konvertera till en str칛ng med hj칛lp av join().
#
# TIPS 2: Du kommer att beh칬va en index-variabel f칬r att h친lla ordning p친 var
#         i listan du befinner dig. Ett s칛tt att g칬r det 칛r att skapa en heltalsvariabel
#         utanf칬r for-loopen och uppdatera denna medan loopen k칬rs, t.ex:
#
#               k = 0
#               my_list = list("En_str칛ng_med_underscore")
#               for c in my_list:
#                   if c == "_":
#                       my_list[k] = " "
#                   k += 1
#
#         Ett annat s칛tt 칛r att anv칛nda enumerate(), som f칬r varje varv i
#         loopen returnerar en tupel best친ende av ett heltalsindex (som
#         automatiskt r칛knas upp) och ett element i listan, t.ex.:
#
#           my_list = list("En_str칛ng_med_underscore")
#           for k, c in enumerate(num_list):
#               if c == "_":
#                   my_list[k] = " "
#
# TIPS 3: Ett s칛tt att slippa index-variablen 칛r att anv칛nda en list-comprehension:
    [c if c != "_" else " " for c in list(string_with_underscores)]
  L칛gg till join() till ovanst친ende s친 칛r du klar! : ) 

#
# L칐SNINGSF칐RSLAG 1:
#
string_with_underscores = "Det_h칛r_칛r_en_str칛ng_med_en_massa_understreck_som_beh칬ver_g칬ras_om_till_mellanslag"
string_list = list(string_with_underscores)
for k, c in enumerate(string_list):
    if c == "_":
        string_list[k] = " "
string_with_underscores = "".join(string_list)
print(string_with_underscores)

# L칐SNINGSF칐RSLAG 2:
string_with_underscores = "Det_h칛r_칛r_en_str칛ng_med_en_massa_understreck_som_beh칬ver_g칬ras_om_till_mellanslag"
string_list = list(string_with_underscores)

tmp_list = [c if c != "_" else " " for c in list(string_with_underscores)]
print("".join(tmp_list))

# Alternativt (men lite gr칬tigare): 
print("".join([c if c != "_" else " " for c in list(string_with_underscores)]))

""")

# L칐SNINGSF칐RSLAG 1
string_with_underscores = "Det_h칛r_칛r_en_str칛ng_med_en_massa_understreck_som_beh칬ver_g칬ras_om_till_mellanslag"
string_list = list(string_with_underscores)
for k, c in enumerate(string_list):
    if c == "_":
        string_list[k] = " "
string_with_underscores = "".join(string_list)
print(string_with_underscores)

# L칐SNINGSF칐RSLAG 2
tmp_list = [c if c != "_" else " " for c in list(string_with_underscores)]
print("".join(tmp_list))

# Alternativt (men lite gr칬tigare): 
print("".join([c if c != "_" else " " for c in list(string_with_underscores)]))
